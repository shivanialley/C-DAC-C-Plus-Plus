//Day 3

Different types of members in a class
	Data Members:
		Class Member:
			One copy per class----> using static keyword

		Object/Instance/Variable Member:
			Each onject has its own copy
				Normal data members without any keyword
				const data members using const keyword
				mutable data members using mutable keyword

		Let have an example of const data members as 
			Example class Employee
			File are EmployeeOne.cpp & EmployeeTwo.cpp

Try with this....
		class Array
		{
			int arr[SIZE];
			const int size;
		public:
			Array(int = 0 );
			Array(int sz, int first);
			void fillArray(int first);
			void printArray();
		};

	Example of this classArrayOne.cpp

After that:
	const member functions & const objects
	mutable & static members
		static members of a class are refered to class members
		one copy per class
		static member functions can access only static data members of the class
		static member function cannot access instance members
		
		Syntax:
			static returnType funName(arguments){
			}
			
		Example of this in EmployeeFour.cpp

	dynamic memory allocation in C++
		Heap based objects/variables allocated dynamically

		C Style:
			In C we use stdlib.h which has functions like malloc, calloc,realloc and free functions for allocating memory dynamically

		C++ Style:
			Remember (always) all valid C code is a C++ Code!. In addition to the above mentioned functions C++ provides operators new and delete for dynamic memory allocation

			C Style:
				int *iPtr = malloc(sizeof(int));
				*iPtr = 10;

				free(iPtr);
			C++ Style: 
				int *iPtr = new int(10);
					For storing individual elements (on data only)

				delete iPtr;

			For collections of elements:
				C Style:
					int size = 100;
					int *iPtr = malloc(sizeof(int) * size);
					or
					int *iPtr = calloc(sizeof(int),size);

					free(iPtr);	

				C++ Style:
					int size =100;
					int *iPtr = new int[size];
						
					delete[] iPtr;

					Example of this SimpleDyy.cpp

	Implement this!...
		class Array
			{
				int *arr; //a pointer variable
				const int size;
			public: 
				Array(int = 0);
				Array(int sz,int first);
			
				void fillArray(int first);
				void printArray();
			}
		
			Example of this ClassArrayDyy.cpp

	Dangling pointer 
		Example of this arrDanglingptr.cpp
	
	For any class in C++,
		your compiler provides necessary syntax support for
			1. default object creation (Default constructor)
				Array obj;
			2. Support copy semantics (Copy Constructor)
				Array objB = objA;
			3. Supports copy assignment (Assignment Operator overload)
				objB = objA;
			4. Support basic destructors (Destructor)

			These above functionalities are provided for every class created in C++
			Your C++ compiler generates constructors & destructor IF NECESSARY(when is this case considered)


		In one file we are using array of chars and in other we are using C++ string object.
		if you use "nm ./a.out" after compiling either of these files.
		you will see some extra 4 functions which are default constructors and destructors
		for your class and also for string class which are generated by compiler for
		file where string is used as a class member.

